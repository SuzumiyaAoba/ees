name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ees_test
          POSTGRES_USER: ees_test
          POSTGRES_PASSWORD: ees_test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    # Temporarily disabled due to Hono OpenAPI framework compatibility issues
    # with TypeScript exactOptionalPropertyTypes and complex route handler typing
    # - name: Run type checking
    #   run: npm run type-check

    - name: Build application
      run: npm run build

    - name: Setup Docker services for E2E tests
      run: |
        echo "Starting Ollama service..."
        docker-compose -f docker-compose.test.yml up -d ollama

        echo "Waiting for Ollama to be ready..."
        timeout 180 bash -c 'until curl -f http://localhost:11434/api/version; do sleep 3; done'
        echo "Ollama is ready!"

        echo "Pulling embedding model..."
        docker exec $(docker-compose -f docker-compose.test.yml ps -q ollama) \
          ollama pull nomic-embed-text
        echo "Model pulled successfully!"

        echo "Verifying model availability..."
        curl -s http://localhost:11434/api/tags | grep -q "nomic-embed-text" || {
          echo "Model not available, attempting alternative pull method..."
          curl -X POST http://localhost:11434/api/pull \
            -H "Content-Type: application/json" \
            -d '{"name": "nomic-embed-text"}' \
            --max-time 180
        }
        echo "Model verification complete!"

    - name: Run unit tests
      run: |
        export NODE_ENV=test
        export EES_DATABASE_URL=":memory:"
        npm run test:unit

    - name: Run E2E tests
      run: |
        export NODE_ENV=test
        export EES_DATABASE_URL=":memory:"
        export EES_PROVIDER=ollama
        export EES_OLLAMA_BASE_URL=http://localhost:11434
        export EES_OLLAMA_DEFAULT_MODEL=nomic-embed-text
        export CI=true
        npm run test:e2e
      timeout-minutes: 20

    - name: Cleanup Docker services
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  # Temporarily disabled due to npmDepsHash mismatch
  # nix-build:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   - name: Install Nix
  #     uses: cachix/install-nix-action@v27
  #     with:
  #       github_access_token: ${{ secrets.GITHUB_TOKEN }}
  #       nix_path: nixpkgs=channel:nixos-23.11
  #   - name: Check Nix flake
  #     run: nix flake check --allow-import-from-derivation
  #   - name: Build Nix package
  #     run: nix build .#ees --print-build-logs
  #   - name: Test Nix package build
  #     run: |
  #       echo 'Testing Nix package...'
  #       ls -la result/
  #       file result/bin/ees

  format-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check code formatting
      run: |
        echo 'Checking code formatting...'
        npm run format

        # Check if there are any changes after formatting
        if ! git diff --exit-code; then
          echo 'Code is not properly formatted. Please run npm run format'
          exit 1
        fi

        echo 'Code formatting is correct'

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=high